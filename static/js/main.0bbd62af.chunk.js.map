{"version":3,"sources":["TrackInfo.js","Featrack.js","reportWebVitals.js","index.js"],"names":["PITCH_CLASS","MODE","CAMELOT_WHEEL_MODE","axios","defaults","headers","post","TrackInfo","props","useState","token","setToken","artist","setArtist","image","setImage","title","setTitle","duration","setDuration","bpm","setBpm","pitch","setPitch","trackUrl","setTrackUrl","camelot","setCamelot","getTrackInfo","trackId","config","get","then","res","data","millis","minutes","Math","floor","seconds","toFixed","msToMinutesAndSecond","catch","error","console","log","response","status","audio_features","concat","camelotKey","getKey","pitchClass","mode","useLayoutEffect","Buffer","from","process","toString","getToken","idType","textAlign","style","width","margin","color","Header","Title","size","Image","src","Content","Item","subtitle","TwitterShareButton","url","hashtags","TwitterIcon","round","onClick","csvTrackFeatures","join","navigator","clipboard","writeText","result","Input","Form","Featrack","track","setId","NaN","pressedKey","setKey","setIdType","handlePress","e","which","preventDefault","value","URL","protocol","paths","pathname","split","parts","length","parseId","target","Body","type","placeholder","defaultValue","onKeyDown","keyNum","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bbd62af.chunk.js","sourcesContent":["import {Buffer} from \"buffer\";\n\nimport axios from \"axios\";\nimport React, {useState, useLayoutEffect} from 'react';\nimport {Block, Button, Card, Heading, Media, Notification} from \"react-bulma-components\";\nimport { TwitterShareButton } from \"react-share\";\nimport { TwitterIcon } from \"react-share\";\nimport { getKey } from \"camelot-wheel\";\n\nimport './Featrack.css';\nimport 'bulma/css/bulma.min.css';\n\nconst PITCH_CLASS = {\n    0: 'C',\n    1: 'C#',\n    2: 'D',\n    3: 'D#',\n    4: 'E',\n    5: 'F',\n    6: 'F#',\n    7: 'G',\n    8: 'G#',\n    9: 'A',\n    10: 'A#',\n    11: 'B',\n}\n\nconst MODE = {\n    0: 'Minor',\n    1: 'Major'\n}\n\nconst CAMELOT_WHEEL_MODE = {\n    0: 'A',\n    1: 'B'\n}\n\naxios.defaults.headers.post['Content-Type'] ='application/x-www-form-urlencoded'\n\nfunction TrackInfo(props) {\n    const [token, setToken] = useState('')\n    const [artist, setArtist] = useState('')\n    const [image, setImage] = useState('')\n    const [title, setTitle] = useState('')\n    const [duration, setDuration] = useState('')\n    const [bpm, setBpm] = useState(0)\n    const [pitch, setPitch] = useState('')\n    const [trackUrl, setTrackUrl] = useState('')\n    const [camelot, setCamelot] = useState('')\n\n    function msToMinutesAndSecond(millis){\n        const minutes = Math.floor(millis / 60000)\n        const seconds = ((millis % 60000) / 1000).toFixed(0)\n        return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds\n    }\n\n    function getToken() {\n        const clientId = process.env.REACT_APP_SPOTIFY_API_CLIENT_ID\n        const clientSecret = process.env.REACT_APP_SPOTIFY_API_CLIENT_SECRET\n        const data = 'grant_type=client_credentials'\n        const config = {\n            headers: {\n                'Authorization': `Basic ${Buffer.from(`${clientId}:${clientSecret}`, 'utf-8').toString('base64')}`,\n                'Content-Type': 'application/x-www-form-urlencoded',\n            }\n        }\n        axios.post(\n            'https://accounts.spotify.com/api/token',\n            data,\n            config\n        ).then(res => {\n            setToken(res['data']['access_token'])\n        }).catch(error => {\n            console.log(`${error.response.status} on fetch token.`)\n        })\n    }\n\n    function getHeaders(){\n        return {\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            }\n        }\n    }\n\n    function getTrackInfo(trackId) {\n        const config = getHeaders()\n        axios.get(\n            `https://api.spotify.com/v1/tracks/${trackId}`,\n            config\n        ).then(res => {\n            const data = res.data\n            setArtist(data['artists'][0]['name'])\n            setImage(data['album']['images'][0]['url'])\n            setTitle(data['name'])\n            setDuration(msToMinutesAndSecond(data['duration_ms']))\n        }).catch(error => {\n            console.log(`${error.response.status} from https://api.spotify.com/v1/tracks/${trackId}`)\n        })\n        axios.get(\n            `https://api.spotify.com/v1/audio-features?ids=${trackId}`,\n            config\n        ).then(res => {\n            const data = res['data']\n            const audio_features = data['audio_features'][0]\n            setBpm(audio_features['tempo'].toFixed(1))\n            setPitch(\n                PITCH_CLASS[audio_features['key']].concat(' ', MODE[audio_features['mode']])\n            )\n            const camelotKey = getKey({\n                pitchClass: audio_features['key'],\n                mode: audio_features['mode']\n            })\n            const camelot = `${camelotKey['camelotPosition']}${CAMELOT_WHEEL_MODE[camelotKey['mode']]}`\n            setCamelot(camelot)\n            setTrackUrl(`https://open.spotify.com/track/${trackId}`)\n        }).catch(error => {\n            console.log(`${error.response.status} from https://api.spotify.com/v1/audio-features?ids=${trackId}`)\n        })\n    }\n\n    function copyHandler() {\n        const trackFeatures = [\n            title,\n            artist,\n            bpm,\n            pitch,\n            camelot\n        ]\n        const csvTrackFeatures = trackFeatures.join()\n        navigator.clipboard.writeText(csvTrackFeatures).then(result =>{\n            console.log(`Copy ${csvTrackFeatures} to clipboard.`)\n        }).catch(error =>{\n            console.log('Failed to copy track features to clipboard.')\n        })\n    }\n\n    useLayoutEffect(\n        () => {\n            getToken()\n            if (props.trackId) {\n                setArtist('')\n                setTitle('')\n                getTrackInfo(props.trackId)\n            }\n        },\n        // eslint-disable-next-line\n        [props.trackId]\n    )\n\n    if (props.trackId === ''){\n        return (\n            <div></div>\n        )\n    }\n    else if (props.idType !== 'track'){\n        return (\n            <div>\n                <Block textAlign={\"center\"} style={{ width: 300, margin: 'auto'}}>\n                    <Notification color={\"warning\"}>\n                        <p>ERROR: URL/URI is not track.</p>\n                    </Notification>\n                </Block>\n            </div>\n        )\n    }\n    else if (artist === ''){\n        return (\n            <div></div>\n        )\n    }\n    return(\n        <div>\n            <Card style={{ width: 350, margin: 'auto'}}>\n                <Card.Header>\n                    <Card.Header.Title size={6}>\n                        {title}<br/>\n                        {artist}\n                    </Card.Header.Title>\n                </Card.Header>\n                <Card.Image size={'square'} src={image} />\n                <Card.Content>\n                    <Media>\n                        <Media.Item>\n                            <Heading subtitle size={6}>\n                                <p>BPM: {bpm}</p>\n                                <p>Key: {pitch}</p>\n                                <p>Camelot: {camelot}</p>\n                                <p>Duration: {duration}</p>\n                            </Heading>\n                        </Media.Item>\n                    </Media>\n                    <TwitterShareButton\n                        title={`${title}/${artist}\\nBPM:${bpm}\\nKey: ${pitch}\\nCamelot: ${camelot}`}\n                        url={trackUrl}\n                        hashtags={[\"FEATRACK\"]}\n                    >\n                        <TwitterIcon size={32} round />\n                    </TwitterShareButton>\n                    <Button onClick={copyHandler}>\n                        Copy audio features to clipboard\n                    </Button>\n                </Card.Content>\n            </Card>\n        </div>\n    )\n\n}\n\nexport default TrackInfo","import axios from 'axios';\nimport React, {useState} from 'react';\nimport {Block, Box, Container, Form, Heading, Hero} from 'react-bulma-components';\n\nimport TrackInfo from './TrackInfo';\n\n\nimport 'bulma/css/bulma.min.css';\n\naxios.defaults.headers.post['Content-Type'] ='application/x-www-form-urlencoded'\nconst { Input } = Form;\n\n\nfunction Featrack() {\n    const [track, setId] = useState('')\n    const [pressedKey, setKey] = useState(NaN)\n    const [idType, setIdType] = useState('')\n\n    function parseId(value){\n        const url = new URL(value)\n        console.log(url)\n        if (url.protocol === 'https:') {\n            const paths = url.pathname.split('/')\n            if (paths[1] === 'track') {\n                setIdType(paths[1])\n                return paths[2]\n            }\n        }\n        else if (url.protocol === 'spotify:') {\n            const parts = url.pathname.split(':')\n            if (parts.length === 2 && parts[0] === 'track') {\n                setIdType(parts[0])\n                return parts[1]\n            }\n        }\n    }\n\n    function handlePress(e){\n        if (e.which === 13){\n            e.preventDefault()\n            const trackId = parseId(e.target.value)\n            setId(trackId)\n            setKey(e.which)\n        }\n    }\n\n    return (\n        <div>\n            <Hero>\n                <Hero.Body>\n                    <Container>\n                        <Heading size={1} textAlign={\"center\"}>\n                            FEATRACK\n                        </Heading>\n                        <Heading subtitle size={5} textAlign={\"center\"}>\n                            Browse audio features with Spotify API\n                        </Heading>\n                        <Block>\n                            <Box style={{ width: 600, margin: 'auto' }}>\n                                <Input\n                                    size=\"medium\"\n                                    type=\"text\"\n                                    placeholder=\"Track URL or Spotify URI\"\n                                    defaultValue={track}\n                                    onKeyDown={(e) => handlePress(e)}\n                                />\n                            </Box>\n                        </Block>\n                        <Block>\n                            <TrackInfo keyNum={pressedKey} trackId={track} idType={idType}/>\n                        </Block>\n                    </Container>\n                </Hero.Body>\n            </Hero>\n        </div>\n    )\n}\n\nexport default Featrack","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Featrack from './Featrack'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Featrack />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}